### 4. general-typescript-rule.mdc
```yaml
---
description: TypeScript best practices covering type safety, modern syntax patterns, and maintainable code structure for all TS/TSX files
globs: "**/*.{ts,tsx}"
priority: high
category: typescript
alwaysApply: true
---

# TypeScript Development Guidelines

## Type Safety First
- **Strict Mode**: Enable strict TypeScript compiler options
- **Explicit Types**: Prefer explicit type annotations over inference when clarity is needed
- **Null Safety**: Handle undefined/null values explicitly

## Modern TypeScript Patterns

### Interface Over Types
```typescript
// ✅ Preferred: Interface for object shapes
interface UserData {
  id: number;
  name: string;
  email: string;
  createdAt: Date;
}

// ❌ Avoid: Type aliases for simple objects
type UserData = {
  id: number;
  name: string;
  email: string;
  createdAt: Date;
}

// ✅ Preferred: Const assertions and maps
const UserRole = {
  ADMIN: 'admin',
  USER: 'user',
  GUEST: 'guest'
} as const;

type UserRoleType = typeof UserRole[keyof typeof UserRole];

// ❌ Avoid: Traditional enums
enum UserRole {
  ADMIN = 'admin',
  USER = 'user',
  GUEST = 'guest'
}

// ✅ Preferred: Const assertions and maps
const UserRole = {
  ADMIN: 'admin',
  USER: 'user',
  GUEST: 'guest'
} as const;

type UserRoleType = typeof UserRole[keyof typeof UserRole];

// ❌ Avoid: Traditional enums
enum UserRole {
  ADMIN = 'admin',
  USER = 'user',
  GUEST = 'guest'
}

// ✅ Leverage TypeScript utility types
type PartialUser = Partial<UserData>;
type UserEmail = Pick<UserData, 'email'>;
type UserWithoutId = Omit<UserData, 'id'>;