### 6. fastapi-route-specific-rules.mdc
```yaml
---
description: Router organization, dependency injection patterns, and clean route structure for FastAPI applications in the routers directory
globs: "**/routers/*.py"
priority: high
category: routing
dependencies: ["error-handling-rules.mdc", "pydantic-model-rules.mdc"]
---

# FastAPI Router Guidelines

## Router Organization Philosophy
- **Single Responsibility**: Each router handles one domain or resource type
- **Clean Dependencies**: Use FastAPI's dependency injection for shared logic
- **Consistent Structure**: Follow a standard file organization pattern

## File Structure Pattern
```python
# ✅ Correct: Router file structure
from fastapi import APIRouter, Depends, HTTPException, status
from typing import List

from ..models.user import UserCreate, UserUpdate, UserResponse
from ..services.user_service import UserService
from ..dependencies import get_current_user, get_user_service

# Router definition at top
router = APIRouter(prefix="/users", tags=["users"])

# Dependencies
async def get_user_or_404(
    user_id: int,
    user_service: UserService = Depends(get_user_service)
) -> UserResponse:
    user = await user_service.get_by_id(user_id)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"User {user_id} not found"
        )
    return user

# Route handlers
@router.get("/{user_id}", response_model=UserResponse)
async def get_user(user: UserResponse = Depends(get_user_or_404)):
    """Get user by ID with automatic 404 handling."""
    return user

@router.post("/", response_model=UserResponse, status_code=201)
async def create_user(
    user_data: UserCreate,
    user_service: UserService = Depends(get_user_service)
):
    """Create a new user."""
    return await user_service.create(user_data)

# ✅ Correct: Reusable dependencies
from fastapi import Depends

def get_pagination(skip: int = 0, limit: int = 100):
    """Reusable pagination dependency."""
    if limit > 100:
        limit = 100
    return {"skip": skip, "limit": limit}

@router.get("/", response_model=List[UserResponse])
async def list_users(
    pagination: dict = Depends(get_pagination),
    user_service: UserService = Depends(get_user_service)
):
    return await user_service.get_many(**pagination)

# ✅ Correct: Concise conditionals
@router.patch("/{user_id}", response_model=UserResponse)
async def update_user(
    user_id: int,
    updates: UserUpdate,
    current_user: User = Depends(get_current_user),
    user_service: UserService = Depends(get_user_service)
):
    if user_id != current_user.id and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Insufficient permissions")

    return await user_service.update(user_id, updates)